
---

### **6-Week In-Depth Bash Scripting Study Plan**

| **Week** | **Day**      | **Topics**                                                                                                                                | **Practice**                                                                                                         | **Resources**  |
|----------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|----------------|
| **Week 1**<br>**Introduction to Bash and Basic Scripting** | **Day 1**  | - **Introduction to Bash**: What is Bash? The Shell, Shell Scripting, Execution, and Permissions<br> - Basics of running commands in a shell (interactive and script mode) | - Write and run your first basic shell script. Ensure you understand how to make it executable (`chmod +x`).       | [Bash Beginner’s Guide](https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)<br> *The Linux Command Line* |
|          | **Day 2**  | - **Variables and Quoting**: Understanding variable declaration, scope, and special variables like `$0`, `$1`, `$#`<br> - Using single vs double quotes, escape sequences        | - Write a script that utilizes variables and takes user input, using `read` and environment variables.               | [Bash Beginner’s Guide](https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)  |
|          | **Day 3**  | - **Conditional Statements**: `if`, `else`, `elif`<br> - Testing strings, numbers, and file attributes using `test` and `[[ ]]`                                                 | - Write a script that makes decisions based on user input, system conditions, or file existence.                     | [Bash Beginner’s Guide](https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)  |
| **Week 2**<br>**Intermediate Scripting: Commands, Loops, and Logic**                 | **Day 1**  | - **Basic Linux Commands in Scripts**: File manipulation commands (`cp`, `mv`, `rm`, `ls`, `cat`, etc.)<br> - Redirecting input/output and piping commands (`|`, `>`, `>>`) | - Write a script that automates file backups and cleanups. Use redirection and pipes to manage output logs.         | *The Linux Command Line*  |
|          | **Day 2**  | - **Loops**: `for`, `while`, `until` loops in Bash<br> - Breaking and continuing loops                                                    | - Write scripts to loop over files in a directory and process each file. Automate log file rotation with loops.      | [Bash Beginner’s Guide](https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)<br> *The Linux Command Line*  |
|          | **Day 3**  | - **Case Statements and Exit Status**: Using `case` for multi-branch logic<br> - Understanding exit status (`$?`) and error handling in Bash scripts                              | - Write scripts that use `case` to handle multiple user inputs. Validate input and exit with appropriate status codes.| [Bash Beginner’s Guide](https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)  |
| **Week 3**<br>**Advanced Scripting Concepts**             | **Day 1**  | - **Functions in Bash**: Defining and calling functions, passing arguments, and returning values                                                            | - Write a modular script with reusable functions for tasks like user management or backups.                          | [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/) |
|          | **Day 2**  | - **Arrays in Bash**: Working with indexed and associative arrays (key-value pairs)                                                       | - Write scripts that store lists of values in arrays. Process arrays with loops to batch tasks like file renaming.    | [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/) |
|          | **Day 3**  | - **Input/Output Redirection, Pipes, and Filters**: Using `|`, `>` and `>>` to manage input/output<br> - Advanced piping and filtering with `grep`, `awk`, `sed`                       | - Write scripts that extract information from logs or text files using `grep` and `awk`. Automate log processing.     | *The Linux Command Line* |
| **Week 4**<br>**Automation and Task Scheduling**             | **Day 1**  | - **Automation with Cron Jobs**: Introduction to `cron` and `at` for task scheduling<br> - Writing scripts for periodic tasks like system backups or monitoring             | - Create cron jobs to automate system tasks (e.g., daily backups). Schedule script execution with `cron` and `at`.   | *The Linux Command Line* |
|          | **Day 2**  | - **Background Jobs and Signals**: Running processes in the background (`&`) and managing jobs<br> - Handling signals (`SIGINT`, `SIGTERM`) and traps in scripts                   | - Write scripts that manage background jobs, capture signals, and use `trap` to handle interruptions.                | [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/) |
|          | **Day 3**  | - **Script Debugging and Error Handling**: Use `set -x` for debugging scripts<br> - Error handling with `trap` and logging errors                                             | - Practice debugging a complex script. Write a robust script that handles errors gracefully and logs them.            | *The Linux Command Line* |
| **Week 5**<br>**Real-World Scripting Challenges and Customization** | **Day 1**  | - **Customizing Your Shell**: `.bashrc`, `.bash_profile`, shell options and aliases<br> - Writing custom shell functions to improve productivity                     | - Customize your shell environment with useful aliases and functions. Write a custom prompt in `.bashrc`.            | *The Linux Command Line* |
|          | **Day 2**  | - **Advanced Scripting Challenges**: Complex challenges from HackerRank and Exercism                                                       | - Solve 5-7 Bash challenges focused on automation, file management, and system operations.                            | [HackerRank](https://www.hackerrank.com/domains/shell)<br> [Exercism](https://exercism.org/tracks/bash)  |
|          | **Day 3**  | - **Writing a Complex Script**: A project combining conditionals, loops, functions, and file handling                                      | - Write a script that manages log files, compresses old logs, and sends reports via email.                            | [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/)  |
| **Week 6**<br>**Real-World Projects and Advanced Techniques**             | **Day 1**  | - **Project: System Monitoring Script**: Write a script that monitors CPU, memory, disk usage, and network traffic, and generates alerts if thresholds are exceeded     | - Write a system monitoring script that logs resource usage and sends alerts via email or messaging services.        | *The Linux Command Line* |
|          | **Day 2**  | - **Project: Automated Backup Solution**: Write a script that backs up important directories, compresses them, and manages backup retention policies                              | - Automate system backups with a cron job. Use a script that compresses backups, moves them to a different server, and manages retention. | *The Linux Command Line*  |
|          | **Day 3**  | - **Project: Log File Processing and Analysis**: Write a script to process system log files, filter out errors, and generate summary reports                                    | - Write a script that analyzes log files (e.g., `/var/log/syslog`) to detect errors and anomalies, and generates a report. | [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/) |

---
